{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "covid19-df-udemy-course"
		},
		"Covid19 Azure Blob Storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Covid19 Azure Blob Storage'"
		},
		"Covid19 Azure Data Lake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Covid19 Azure Data Lake'"
		},
		"Covid19 Azure Data Lake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://covid19dludemycourse.dfs.core.windows.net/"
		},
		"ECDC MONK SITE HTTP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat(linkedService().SCHEME, ':\\\\', linkedService().HOST)}"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Covid19 Azure Blob Storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Covid19 Azure Blob Storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Covid19 Azure Data Lake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Covid19 Azure Data Lake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Covid19 Azure Data Lake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECDC MONK SITE HTTP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"HOST": {
						"type": "string",
						"defaultValue": "raw.githubusercontent.com"
					},
					"SCHEME": {
						"type": "string",
						"defaultValue": "https"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ECDC MONK SITE HTTP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/conf_ecdc_file_name_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Blob Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ecdc_file_name.json",
						"container": "conifgs"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"src_file": {
							"type": "string"
						},
						"dst_file": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Blob Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_bronze_cases_death_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Data Lake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cases_deaths.csv",
						"folderPath": "ecdc",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "country_code",
						"type": "String"
					},
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					},
					{
						"name": "indicator",
						"type": "String"
					},
					{
						"name": "daily_count",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "rate_14_day",
						"type": "String"
					},
					{
						"name": "source",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Data Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_bronze_country_code_loopup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Data Lake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "country_lookup.csv",
						"folderPath": "ecdc",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "country_code_2_digit",
						"type": "String"
					},
					{
						"name": "country_code_3_digit",
						"type": "String"
					},
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Data Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_bronze_dim_date_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Data Lake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_date.csv",
						"folderPath": "ecdc",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "date_key",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "month",
						"type": "String"
					},
					{
						"name": "day",
						"type": "String"
					},
					{
						"name": "day_name",
						"type": "String"
					},
					{
						"name": "day_of_year",
						"type": "String"
					},
					{
						"name": "week_of_month",
						"type": "String"
					},
					{
						"name": "week_of_year",
						"type": "String"
					},
					{
						"name": "month_name",
						"type": "String"
					},
					{
						"name": "year_month",
						"type": "String"
					},
					{
						"name": "year_week",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Data Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_bronze_hospital_admissions_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Data Lake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "hospital_admissions.csv",
						"folderPath": "ecdc",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "indicator",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "year_week",
						"type": "String"
					},
					{
						"name": "value",
						"type": "String"
					},
					{
						"name": "source",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Data Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ecdc_csv_dl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Data Lake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FILE_NAME": {
						"type": "string",
						"defaultValue": "cases_deaths.csv"
					},
					"PATH": {
						"type": "string",
						"defaultValue": "ecdc"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FILE_NAME",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().PATH",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Data Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ecdc_csv_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ECDC MONK SITE HTTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"HOST": "raw.githubusercontent.com",
						"SCHEME": "https"
					}
				},
				"parameters": {
					"FILE_NAME": {
						"type": "string",
						"defaultValue": "cases_deaths.csv"
					},
					"PATH": {
						"type": "string",
						"defaultValue": "cloudboxacademy/covid19/main/ecdc_data"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat(dataset().PATH, '/', dataset().FILE_NAME)",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ECDC MONK SITE HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_bronze_population_by_age_tsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The file contains population data grouped by country and age.",
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Data Lake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "population",
						"fileSystem": "bronze"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Data Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_population_by_age_gz')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The file contains population data grouped by country and age.",
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Blob Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "population_by_age.tsv.gz",
						"container": "population"
					},
					"columnDelimiter": "\t",
					"compressionCodec": "gzip",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Blob Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_silver_cases_deaths_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Data Lake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cases_deaths",
						"folderPath": "ecdc/cases_deaths",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Data Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_silver_daily_hospital_admissions_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Data Lake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ecdc/hospital_admissions/daily",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Data Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_silver_weekly_hospital_admissions_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Covid19 Azure Data Lake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ecdc/hospital_admissions/weekly",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Data Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_ecdc_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For All ECDC dataset",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup ECDC file name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup ECDC file name').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy CECD data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_ecdc_csv_http",
											"type": "DatasetReference",
											"parameters": {
												"FILE_NAME": {
													"value": "@concat(item().source_file, '.csv')",
													"type": "Expression"
												},
												"PATH": {
													"value": "@item().source_path",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ecdc_csv_dl",
											"type": "DatasetReference",
											"parameters": {
												"FILE_NAME": {
													"value": "@concat(item().sink_file, '.csv')",
													"type": "Expression"
												},
												"PATH": {
													"value": "@item().sink_path",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Lookup ECDC file name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "conf_ecdc_file_name_json",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/conf_ecdc_file_name_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_ecdc_csv_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_ecdc_csv_dl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_population_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check whether the file exist",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_raw_population_by_age_gz",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "1.00:00:00",
							"sleep": {
								"value": "@mul(pipeline().parameters.FILE_CHECKING_INTERVAL_MINUTIE, 60)",
								"type": "Expression"
							},
							"minimumSize": 1024
						}
					},
					{
						"name": "Get File Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Check whether the file exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_raw_population_by_age_gz",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"size",
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Check Column Count",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get File Metadata').output.columnCount, pipeline().parameters.FILE_COLUMN_COUNT)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Invalid File",
									"description": "The column count of the file is not equals to FILE_COLUMN_COUNT, please check.",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "The column count of the file is not equals to FILE_COLUMN_COUNT, please check.",
										"errorCode": "422"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy population raw data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"validateDataConsistency": false,
										"dataIntegrationUnits": 2,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_raw_population_by_age_gz",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_bronze_population_by_age_tsv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete Source file",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy population raw data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_raw_population_by_age_gz",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FILE_CHECKING_INTERVAL_MINUTIE": {
						"type": "int",
						"defaultValue": 10
					},
					"FILE_COLUMN_COUNT": {
						"type": "int",
						"defaultValue": 13
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_population_by_age_gz')]",
				"[concat(variables('factoryId'), '/datasets/ds_bronze_population_by_age_tsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cases_deaths_transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_bronze_cases_death_csv",
								"type": "DatasetReference"
							},
							"name": "CasesDeaths"
						},
						{
							"dataset": {
								"referenceName": "ds_bronze_country_code_loopup",
								"type": "DatasetReference"
							},
							"name": "ContryCodeLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silver_cases_deaths_parquet",
								"type": "DatasetReference"
							},
							"name": "CasesAndDeathSink"
						}
					],
					"transformations": [
						{
							"name": "FilterEUOnly",
							"description": "filter Erurope data only"
						},
						{
							"name": "SelectAndDrop"
						},
						{
							"name": "PivotCount"
						},
						{
							"name": "MergeWithContryCode"
						},
						{
							"name": "SelectAndRename"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as integer,",
						"          date as date,",
						"          rate_14_day as string,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CasesDeaths",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ContryCodeLookup",
						"CasesDeaths filter(continent == 'Europe') ~> FilterEUOnly",
						"FilterEUOnly select(mapColumn(",
						"          country,",
						"          country_code,",
						"          population,",
						"          indicator,",
						"          daily_count,",
						"          source,",
						"          each(match(name=='date'),",
						"               'reported_'+$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAndDrop",
						"SelectAndDrop pivot(groupBy(country,",
						"          country_code,",
						"          population,",
						"          source,",
						"          reported_date),",
						"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
						"     count = sum(daily_count),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivotCount",
						"PivotCount, ContryCodeLookup lookup(PivotCount@country == ContryCodeLookup@country",
						"     && country_code == country_code_3_digit,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> MergeWithContryCode",
						"MergeWithContryCode select(mapColumn(",
						"          country = PivotCount@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population = PivotCount@population,",
						"          cases_count = {confirmed cases_count},",
						"          deaths_count,",
						"          reported_date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAndRename",
						"SelectAndRename sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CasesAndDeathSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_bronze_cases_death_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_bronze_country_code_loopup')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver_cases_deaths_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_hostpital_admissions_transform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_bronze_hospital_admissions_csv",
								"type": "DatasetReference"
							},
							"name": "HospitalAdmissions"
						},
						{
							"dataset": {
								"referenceName": "ds_bronze_dim_date_csv",
								"type": "DatasetReference"
							},
							"name": "DimDate"
						},
						{
							"dataset": {
								"referenceName": "ds_bronze_country_code_loopup",
								"type": "DatasetReference"
							},
							"name": "CountryCode"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silver_daily_hospital_admissions_parquet",
								"type": "DatasetReference"
							},
							"name": "SinkToDailyHospitalAdmissionsData",
							"rejectedDataLinkedService": {
								"referenceName": "Covid19 Azure Data Lake",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_silver_weekly_hospital_admissions_parquet",
								"type": "DatasetReference"
							},
							"name": "SinkToWeeklyHospitalAdmissionsData"
						}
					],
					"transformations": [
						{
							"name": "AggToGenStartAndEndDateOfWeek"
						},
						{
							"name": "NewYearWeekCol"
						},
						{
							"name": "PivotDailyIndicatior"
						},
						{
							"name": "SelectAndRenameColumnsForDailyData"
						},
						{
							"name": "SplitDailyFromWeekly"
						},
						{
							"name": "LeftJoinCountryCode"
						},
						{
							"name": "select1"
						},
						{
							"name": "PivotWeeklyIndicatior"
						},
						{
							"name": "SelectAndRenameColumnsForWeeklyData"
						},
						{
							"name": "join1"
						},
						{
							"name": "SortWeeklyByYearWeekThenCountryName"
						},
						{
							"name": "SortWeeklyByDateThenCountryName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date 'yyyy-MM-dd',",
						"          year_week as string,",
						"          value as string,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HospitalAdmissions",
						"source(output(",
						"          date_key as integer,",
						"          date as date 'yyyy-MM-dd',",
						"          year as integer,",
						"          month as integer,",
						"          day as integer,",
						"          day_name as string,",
						"          day_of_year as integer,",
						"          week_of_month as integer,",
						"          week_of_year as integer,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimDate",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CountryCode",
						"DimDate aggregate(groupBy(year,",
						"          week_of_year),",
						"     start_date = min(date),",
						"          end_date = max(date)) ~> AggToGenStartAndEndDateOfWeek",
						"AggToGenStartAndEndDateOfWeek derive(year_week = concat(toString(year), '-W', toString(week_of_year, '00'))) ~> NewYearWeekCol",
						"SplitDailyFromWeekly@Daily pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          source),",
						"     pivotBy(indicator, ['Daily ICU occupancy', 'Daily hospital occupancy']),",
						"     count = first(toInteger(value), true()),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivotDailyIndicatior",
						"PivotDailyIndicatior select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          hospital_occupancy_count = {Daily hospital occupancy_count},",
						"          icu_occupancy_count = {Daily ICU occupancy_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAndRenameColumnsForDailyData",
						"select1 split(startsWith(indicator, 'Daily'),",
						"     disjoint: false) ~> SplitDailyFromWeekly@(Daily, Weekly)",
						"HospitalAdmissions, CountryCode join(HospitalAdmissions@country == CountryCode@country,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoinCountryCode",
						"LeftJoinCountryCode select(mapColumn(",
						"          country = HospitalAdmissions@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date = date,",
						"          reported_year_week = year_week,",
						"          indicator,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"SplitDailyFromWeekly@Weekly pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          source),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
						"     count = sum(toDouble(value)),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivotWeeklyIndicatior",
						"join1 select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          reported_week_start_date = start_date,",
						"          reported_week_end_date = end_date,",
						"          new_hospital_occupacy_count = {Weekly new hospital admissions per 100k_count},",
						"          new_icu_occupacy_count = {Weekly new ICU admissions per 100k_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAndRenameColumnsForWeeklyData",
						"PivotWeeklyIndicatior, NewYearWeekCol join(reported_year_week == year_week,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectAndRenameColumnsForWeeklyData sort(desc(reported_year_week, true),",
						"     asc(country, true)) ~> SortWeeklyByYearWeekThenCountryName",
						"SelectAndRenameColumnsForDailyData sort(desc(reported_date, true),",
						"     asc(country, true)) ~> SortWeeklyByDateThenCountryName",
						"SortWeeklyByDateThenCountryName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkToDailyHospitalAdmissionsData",
						"SortWeeklyByYearWeekThenCountryName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkToWeeklyHospitalAdmissionsData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_bronze_hospital_admissions_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_bronze_dim_date_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_bronze_country_code_loopup')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver_daily_hospital_admissions_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/Covid19 Azure Data Lake')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver_weekly_hospital_admissions_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_porcess_ecdc_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform Cases Deaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cases_deaths_transformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CasesDeaths": {},
									"ContryCodeLookup": {},
									"CasesAndDeathSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Transform Hospital Admissions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_hostpital_admissions_transform",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HospitalAdmissions": {},
									"DimDate": {},
									"CountryCode": {},
									"SinkToDailyHospitalAdmissionsData": {},
									"SinkToWeeklyHospitalAdmissionsData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_cases_deaths_transformation')]",
				"[concat(variables('factoryId'), '/dataflows/df_hostpital_admissions_transform')]"
			]
		}
	]
}