{
	"name": "df_hostpital_admissions_transform",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_bronze_hospital_admissions_csv",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissions"
				},
				{
					"dataset": {
						"referenceName": "ds_bronze_dim_date_csv",
						"type": "DatasetReference"
					},
					"name": "DimDate"
				},
				{
					"dataset": {
						"referenceName": "ds_bronze_country_code_loopup",
						"type": "DatasetReference"
					},
					"name": "CountryCode"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_silver_daily_hospital_admissions_parquet",
						"type": "DatasetReference"
					},
					"name": "SinkToDailyHospitalAdmissionsData",
					"rejectedDataLinkedService": {
						"referenceName": "Covid19 Azure Data Lake",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_silver_weekly_hospital_admissions_parquet",
						"type": "DatasetReference"
					},
					"name": "SinkToWeeklyHospitalAdmissionsData"
				}
			],
			"transformations": [
				{
					"name": "AggToGenStartAndEndDateOfWeek"
				},
				{
					"name": "NewYearWeekCol"
				},
				{
					"name": "PivotDailyIndicatior"
				},
				{
					"name": "SelectAndRenameColumnsForDailyData"
				},
				{
					"name": "SplitDailyFromWeekly"
				},
				{
					"name": "LeftJoinCountryCode"
				},
				{
					"name": "select1"
				},
				{
					"name": "PivotWeeklyIndicatior"
				},
				{
					"name": "SelectAndRenameColumnsForWeeklyData"
				},
				{
					"name": "join1"
				},
				{
					"name": "SortWeeklyByYearWeekThenCountryName"
				},
				{
					"name": "SortWeeklyByDateThenCountryName"
				},
				{
					"name": "AddTimestamp"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as string,",
				"          year_week as string,",
				"          value as string,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissions",
				"source(output(",
				"          date_key as integer,",
				"          date as date 'yyyy-MM-dd',",
				"          year as integer,",
				"          month as integer,",
				"          day as integer,",
				"          day_name as string,",
				"          day_of_year as integer,",
				"          week_of_month as integer,",
				"          week_of_year as integer,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimDate",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryCode",
				"DimDate aggregate(groupBy(year,",
				"          week_of_year),",
				"     start_date = min(date),",
				"          end_date = max(date)) ~> AggToGenStartAndEndDateOfWeek",
				"AggToGenStartAndEndDateOfWeek derive(year_week = concat(toString(year), '-W', toString(week_of_year, '00'))) ~> NewYearWeekCol",
				"SplitDailyFromWeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source,",
				"          transformed_at),",
				"     pivotBy(indicator, ['Daily ICU occupancy', 'Daily hospital occupancy']),",
				"     count = first(toInteger(value), true()),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotDailyIndicatior",
				"PivotDailyIndicatior select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          hospital_occupancy_count = {Daily hospital occupancy_count},",
				"          icu_occupancy_count = {Daily ICU occupancy_count},",
				"          source,",
				"          transformed_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAndRenameColumnsForDailyData",
				"AddTimestamp split(startsWith(indicator, 'Daily'),",
				"     disjoint: false) ~> SplitDailyFromWeekly@(Daily, Weekly)",
				"HospitalAdmissions, CountryCode join(HospitalAdmissions@country == CountryCode@country,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftJoinCountryCode",
				"LeftJoinCountryCode select(mapColumn(",
				"          country = HospitalAdmissions@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          indicator,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"SplitDailyFromWeekly@Weekly pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          source,",
				"          transformed_at),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(toDouble(value)),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotWeeklyIndicatior",
				"join1 select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = start_date,",
				"          reported_week_end_date = end_date,",
				"          new_hospital_occupacy_count = {Weekly new hospital admissions per 100k_count},",
				"          new_icu_occupacy_count = {Weekly new ICU admissions per 100k_count},",
				"          source,",
				"          transformed_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAndRenameColumnsForWeeklyData",
				"PivotWeeklyIndicatior, NewYearWeekCol join(reported_year_week == year_week,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"SelectAndRenameColumnsForWeeklyData sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> SortWeeklyByYearWeekThenCountryName",
				"SelectAndRenameColumnsForDailyData sort(desc(reported_date, true),",
				"     asc(country, true)) ~> SortWeeklyByDateThenCountryName",
				"select1 derive(transformed_at = currentDate('UTC')) ~> AddTimestamp",
				"SortWeeklyByDateThenCountryName sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkToDailyHospitalAdmissionsData",
				"SortWeeklyByYearWeekThenCountryName sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkToWeeklyHospitalAdmissionsData"
			]
		}
	}
}